
                                                              REACT 
                                                     -----------------------------            
              PROJECT CREATION

              1. npx create-react-app demoapp
              2. cd demoapp
              3.npm start

              PROJECT CREATION USING VITE  : https://vitejs.dev/

              1.npx create-vite@latest demp-app -template react
              2. cd demp-app
              3. code .
              4.npm install (for creating node modules)
              5. npm run dev   

              1.PROJECT 1 - RESTAURANT-LISTING-APP

               -->  FRONTEND : REACT
               -->  JSON-SERVER

               FRONTEND CREATION
                 
              1.npx create-vite@latest restaurant-frontend - template react
              2. cd restaurant-frontend
              3. code .
              4. npm install (for creating node modules)
              5. npm run dev (project run)
              6.installing 3rd party libraries
                -> Choose the theme using  : https://bootswatch.com/
                  -download bootstrap.min.css file and import it into main.jsx

               -> Install MDB bootstrap / react-bootstrap / react-mui 
                 
                    -https://mdbootstrap.com/
                    -https://react-bootstrap.github.io/
                    -https://mui.com/

              => Installing MDB bootstrap
 
                  - npm i mdb-react-ui-kit
                  - npm i @fortawesome/fontawesome-free 

               CSS import - Add the following lines in your index.js file before the App.js file import:
                   Main.jsx
                   -import 'mdb-react-ui-kit/dist/css/mdb.min.css';
                   -import "@fortawesome/fontawesome-free/css/all.min.css";

                => React bootstrap : https://react-bootstrap.github.io/

                   npm install react-bootstrap bootstrap

                => google fonts


              7. BACK-END CREATION USING JSON_SERVER

                1.create a new folder for backend (restaurant-backend)
                2.create package.json file - npm init -y
                3.install json-server  npm i -g json-server ||  npm  i json-server@0 17.4
                4.create db.json file -(inside it restaurant data included)
                5. create index.js file (Main file)
                6.creation of node-modules- npm i json-server
                7. update in package.json

                 "scripts" : {
                  "start" : "nodemon index.js"
                 },
                8.Install nodemon
                9.Run backend -npm start

-------------------------------------------------------------------------------------------------------------------------
        API FETCHING IN FRONTEND WITH AXIOS

        ->Axios is a promise-based HTTP Client for node.js and the browser. 
        It is isomorphic (= it can run in the browser and nodejs with the same codebase). 
        ->On the server-side it uses the native node.js http module, while on the client (browser) it uses XMLHttpRequests.

        Features
        ->Make XMLHttpRequests from the browser
        ->Make http requests from node.js
        ->Supports the Promise API
        ->Intercept request and response
        ->Transform request and response data
        Installing Using npm:  npm install axios


        1.Install axios
        2.import axios in AllRest.jsx component
        3.create base_url='http://localhost:3000/restaurants'\
        4.create a function for fetching
        5.create  useffect for calling function

        PATH SETUP IN REACT - REACT ROUTER DOM

        React router dom

        Client side routing allows your app to update the URL from a link click without making another request for another document from the server. Instead, your app can immediately render some new UI and make data requests with fetch to update the page with new information.

        iNSTALL - npm i react-router-dom

       ->Browser router - It is used to set up app routing
       -> Routes - To Hold  more than one route
       -> Route - To setup Component path - app.jsx

---------------------------------------------------------------------------------------------------------------------------------------

                  EMPLOYEE MANAGEMENT SYSTEM
            
                     EMS FRONTEND
                -------------------------------------------


        1.Create a new project - npx create-vite@latest ems-frontend -template react
        2.cd ems-frontend
        3.npm install
        4.code .
        5.Run - npm run dev
        6.Clear the unwanted codes
        7.Install the 3rd party libraries
            ->MDB bootstrap - npm i mdb-react-ui-kit
            ->font awesome - npm i @fortawesome/fontawesome-free
                            CSS import
                            Add the following lines in your index.js file before the App.js file import:

                INDEX.JS
                ->import 'mdb-react-ui-kit/dist/css/mdb.min.css';
                ->import "@fortawesome/fontawesome-free/css/all.min.css";
            ->react bootstrap - npm install react-bootstrap bootstrap
            ->google
            @import -> index.css
            <link>  -> paste it into index.html

            ->bootwatch 

            -select theme and paste it into src
            - import './bootstrap.min.css' paste it into main.js

        7. Components Creation
            ->Admin.jsx
            ->Add.jsx
            ->Edit.jsx
            ->View.jsx
            ->PageNotFound.jsx
            ->Header.jsx
            ->Footer.jsx

      9.Path creation                      

          iNSTALL - npm i react-router-dom

       ->Browser router - It is used to set up app routing
       -> Routes - To Hold  more than one route
       -> Route - To setup Component path - app.jsx

        10. Design all Components



                    BACK END CREATION

        1.Create a folder for backend (ems-backend)
        2. create package.json file - npm init -y
        3. Install express and cores - npm i express cors

             EXPRESS: https://expressjs.com
             Express is a minimal and flexible Node.js web application framework that provides a robust set of features for web and mobile applications.

            CORS - Cross-Origin Resource Sharing -
            https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS
            https://www.npmjs.com/package/cors
            Cross-Origin Resource Sharing (CORS) is an HTTP-header based mechanism that allows a server to indicate any origins (domain, scheme, or port) other than its own from which a browser should permit loading resources. 
            The CORS mechanism supports secure cross-origin requests and data transfers between browsers and servers.




        4. Create service folder to handle backend logic
            -> db.js - Connecting to the database 
              -mongoose  (for connect node and mongodb)
              -Mongoose is a MongoDB object modeling tool designed to work in an asynchronous environment. Mongoose supports Node.js and Deno (alpha).
              -npm i mongoose
            -> logic.js
               Implementing all the functionality of the service


  --------------------------------------------------------------------------------------------------------------


                                    PROJECT FAIR
                              -------------------------

                              PROJECT FIRM FRONT END CREATION

          1. PROJECT CREATION: npx create-vite@latest project-fair-frontend --template react    
          2. cd project-fair-front-end
          3. npm install
          4. code .
          5. To open react project directly from vscode,
              update your package.json file and the following lines inside scripts

              scripts:[

                "dev":"vite --open"
              ]       

              OR

              run the foillowing command : npm run dev -- --open         
          
          6. clear the unwanted codes

          7. install 3rd party libraries

             -React bootstrap/React material-ui/MDB bootstrap
                 MDB bootstrap
                 import 'mdb-react-ui-kit/dist/css/mdb.min.css';

             --Font awsome /React icon github io
                React icon github io:
                 https://react-icons.github.io/react-icons/

                -> npm install react-icons --save
                  eg:search for laptop
                  import { GiLaptop } from "react-icons/gi";
             -- Google fonts
             -- Bootswatch

          8. component creation   
           
             -> pages(folder)
             -> home.jsx
             -> projects.jsx
             ->Dashboard.jsx
             ->Auth.jsx

             components
            -> Header.jsx
            ->footer.jsx


Backend for PROJECT FAIR
                        ---------------------------------

    1. Create a folder for backend - project-fair-backend
    2. Create package.json file - npm init -y
    3. Install 3rd party packages

    Express - npm i express
    ->Express.js is the most popular backend framework for Node.js, and it is an extensive part of the JavaScript ecosystem.
    ->It is designed to build single-page, multi-page, and hybrid web applications
    -> it has also become the standard for developing backend applications with Node.js, and it is the backend part of something known as the MERN stack.

    ->The MERN is a free and open-source JavaScript software stack for building dynamic websites and web applications that has the following components:

    ->MongoDB: MongoDB is the standard NoSQL database
    ->Express.js: The default web applications framework for building web apps
    ->React.js: The JavaScript framework used for building front-end web applications
    ->Node.js: JavaScript engine used for scalable server-side and networking applications.

    CORS - npm i cors 
    ->The word CORS stands for “Cross-Origin Resource Sharing”. Cross-Origin Resource Sharing is an HTTP-header based mechanism implemented by the browser which allows a server or an API(Application Programming Interface) to indicate any origins (different in terms of protocol, hostname, or port) other than its origin from which the unknown origin gets permission to access and load resources. The cors package available in the npm registry is used to tackle CORS errors in a Node.js application.

    Environment variables are variables external to our application which reside in the OS or the container of the app is running in. An environment variable is simply a name mapped to a value.
    Data which changes depending on the environment your app is running on should be set as environment variables. Some common examples are:

    -HTTP Port and Address
    -Database, cache, and other storage connection information
    -Location of static files/folders

    The dotenv Library
    This library does one simple task: loads environment variables from a .env file into the process.env variable in Node.jsThe dotenv Library



    MVC Architecture
                     ------------------------
    What is Model-View-Controller?

    MVC is simply a design or architectural pattern used in software engineering. 
    While this isn’t a hard rule, but this pattern helps developers focus on a particular aspect of their application, one step at a time.

    The main goal of MVC is to split large applications into specific sections that have their own individual purpose.

    It also allows developers to logically structure applications in a secure way, which we will show in this tutorial. But first, let’s break down what each aspect of the pattern provides.

    Model
    As the name implies, a model is a design or structure. 
    In the case of MVC, the model determines how a database is structured, defining a section of the application that interacts with the database. 
    This is where we will define the properties of a user that will be store in our database.
    The controller accesses the database through the model. You could say that the model is the heart of the application.

    View
    The view is where end users interact within the application.
    Simply put, this is where all the HTML template files go.

    Controller
    The controller interacts with the model and serves the response and functionality to the view. 
    When an end user makes a request, it’s sent to the controller which interacts with the database.

    You can think of the controller as a waiter in a restaurant that handles customers’ orders, which in this case is the view. The waiter then goes to the kitchen, which is the model/database, and gets food to serve the customers, which is the controller handling the request.


    JWT Token  - Web security 
    ---------------------------------
    Installation - npm i jsonwebtoken

    Import - const jwt = require("jsonwebtoken")

    Token Creation  - const token = jwt.sign({userId :user._id},"superkey2024")

    Token Verification - jwt.verify()

    We need a middleware

    Middleware 
    ------------------------------
    Middleware functions are functions that have access to the request object (req), the response object (res), and the next middleware function in the application’s request-response cycle. 
    ->The next middleware function is commonly denoted by a variable named next.

    Middleware functions can perform the following tasks:
    ->Execute any code.
    ->Make changes to the request and the response objects.
    ->End the request-response cycle.
    ->Call the next middleware function in the stack.
    
    If the current middleware function does not end the request-response cycle, it must call next() to pass control to the next middleware function. Otherwise, the request will be left hanging.

    An Express application can use the following types of middleware:

        =>Application-level middleware
        =>Router-level middleware
        =>Error-handling middleware
        =>Built-in middleware express.json()
        =>Third-party middleware


    Multer
    --------
    Multer is a node.js middleware for handling multipart/form-data, which is primarily used for uploading files. It is written on top of busboy for maximum efficiency
    npm i multer



                                                     COUNTER APP USING REDUX
                                                --------------------------------

          1. Create app: npx create-vite@latest project-fair-frontend --template react    
          2. cd project-fair-front-end
          3. npm install
          4. code .
          5. To open react project directly from vscode,
              update your package.json file and the following lines inside scripts

              scripts:[

                "dev":"vite --open"
              ]       

              OR

              run the foillowing command : npm run dev -- --open         
          
          6. clear the unwanted codes   

          7.Install Redux using -https://redux-toolkit.js.org/   
                    1.npm install @reduxjs/toolkit
                    2.npm install react-redux

         8.Design our component
              1. create components -Counter.jsx   
              2.Install the 3rd party libraries
            ->MDB bootstrap - npm i mdb-react-ui-kit
            ->font awesome - npm i @fortawesome/fontawesome-free
                            CSS import
                            Add the following lines in your index.js file before the App.js file import:

                INDEX.JS
                ->import 'mdb-react-ui-kit/dist/css/mdb.min.css';
                ->import "@fortawesome/fontawesome-free/css/all.min.css";
            ->react bootstrap - npm install react-bootstrap bootstrap
            ->google
            @import -> index.css
            <link>  -> paste it into index.html

            ->bootwatch 


         3. implement redux

         1.create a redux folder inside the src
         2.Inside the redux folder create a store js file and create store using configureStore() method
         3.Make sure the store is available in the application so, using provider tag will be implemented in the main.js file

        4. create a slice file (Action + reducer) using createSlice() method



        E CART FRONTEND
                    -------------------------

            1.Project Creation - npx create-vite@latest ecart-redux -template react
            2.cd e-cart-redux , npm install 
            3.code .
            4. Run Project - npm run dev
            5. Clear the unwanted codes
            6. Install 3rd party libraries
                i) React Bootstrap - npm install react-bootstrap bootstrap
                ii) MDB Bootstrap - npm i mdb-react-ui-kit
                iii) Fontawsome -npm i @fortawesome/fontawesome-free
                In Index.js - 
                        import 'mdb-react-ui-kit/dist/css/mdb.min.css';
                        import "@fortawesome/fontawesome-free/css/all.min.css";
                iv) Bootswatch 
                v) Google Fonts
            7.Components Creation 
                    Pages
                        -Home.jsx
                        -Cart.jsx
                        -Wishlist.jsx
                        -PageNotFound.jsx
                    Components
                        -Header.jsx
                        -Footer.jsx

            8. Path setup
                Installation - npm i react-router-dom

            9. Page Designing  
                       